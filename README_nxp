Compilation
~~~~~~~~~~~

To compile with DPDK, mTCP is dependant on libgmp and libnuma. Below are the compilation
steps of these libraries:

NOTE: For DPDK compilation please follow the DPDK README and also specify the "--prefix"
for installation directory.

Numa Compilation
~~~~~~~~~~~~~~~~

sudo apt install libtool-bin
git clone https://github.com/numactl/numactl.git
cd numactl
git checkout v2.0.13 -b v2.0.13
./autogen.sh
autoconf -i
./configure --host=aarch64-linux-gnu --prefix=<install path>
make
make install

GMP Compilation
~~~~~~~~~~~~~~~

curl -O https://gmplib.org/download/gmp/gmp-6.2.1.tar.xz
tar Jxf gmp-6.2.1.tar.xz
export CFLAGS="-O3"
export CXXFLAGS="-O3"
cd gmp-6.2.1/
./configure --host=aarch64-linux-gnu --prefix=<install path>
make -j4
make install

mTCP Compilation
~~~~~~~~~~~~~~~~

export RTE_SDK=<DPDK base directory Path>
export CFLAGS=<path of gmp and numa header files>
export LDFLAGS=<path of gmp and numa libraries>
export CC=<Cross Compile GCC path>
./configure --host=aarch64-linux-gnu --with-dpdk-lib=<DPDK installation path>
make setup-dpdk
make

App Compilation
~~~~~~~~~~~~~~~

make -C apps/perf

Sample Compilation setup
########################

export RTE_SDK=/home/dpdk/dpdk_temp/dpdk_temp/dpdk
export CFLAGS="-Wno-error -I/home/dpdk/dpdk_temp/dpdk_temp/gmp-6.2.1/gmp/include -I/home/dpdk/dpdk_temp/dpdk_temp/numactl/install/include"
export LDFLAGS="-L/home/dpdk/dpdk_temp/dpdk_temp/gmp-6.2.1/gmp/lib -L/home/dpdk/dpdk_temp/dpdk_temp/numactl/install/lib"
export CC=/home/toolchain/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-gcc 

./configure --host=aarch64-linux-gnu --with-dpdk-lib=$RTE_SDK/install
make setup-dpdk
make

*********************************
Application running steps:
-------------------------

DPAA2 Setup:
------------
	* Take 2 DPAA2 boards, run dynamic_dpl.sh script on both boards with at least 1 DPMAC object.
	  please refer DPDK documentation for setup.
	* Connect dpmac/ports of both boards with each other (back to back)

DPAA Setup:
-----------
	* Create a back-to-back setup of two DPAA boards.
	* Execute the fmc script files. please refer DPDK documentation for FMC commands.

1. "client" Application:

  Application measures read and write throughput for particular number of seconds.

  - Running steps (DPAA and DPAA2):

	* Take the "client" application, client.conf, sample_route.conf, sample_arp.conf to the both boards.
	* Rename the sample files to route.conf and arp.conf.
	* Update route and arp entries as per the IPs and MAC address of the interfaces.
	  Note: User will get to know about port MAC address and IP address (if not given
		in config file) on application run. so first execute the application,
		get the IP addresses and MAC addresses and fill the route and arp config and
		re-run the application.
	* Copy route.conf and arp.conf to the "./config" directory.
	* Update client.conf with required details and correct port names to be used for
	  traffic and port names must be comma(,) separated.
		ie. dpni.* in case of DPAA2 and fm1-mac* in case of DPAA1.

	  Please refer section "MTCP configuration Section" in this README for more deatils.

	* On first board run below command:
		#. ./client send <destination IP> <port> <time in seconds>

	* On 2nd board run below command:
		#. ./client wait <destination IP> <port> <time in seconds>

	whereas:
		<destination IP>: IP address of neighbour
		<port>: Any TCP port number

  Note: Application can run only on 1 core.

2. Example Webserver:

  - Running steps (DPAA and DPAA2):

	* Take the "epserver" application and "epserver.conf" to the first board.
	* Take the "epwget" application and "epwget.conf" to the second board.
	* Take sample_route.conf, sample_arp.conf to the both boards.
	* Rename the sample files to route.conf and arp.conf.
	* Update route and arp entries as per the IPs and MAC address of the interfaces.
	  Note: User will get to know about port MAC address and IP address (if not given
		in config file) on application run. so first execute the application,
		get the IP addresses and MAC addresses and fill the route and arp config
		and re-run the application.
	* Copy route.conf and arp.conf to the "./config" directory.
	* Update epserver.conf and epwget.conf with required details and correct port names
	  to be used for traffic and port names must be comma(,) separated.
		ie. dpni.* in case of DPAA2 and fm1-mac* in case of DPAA1.
		Please refer section "MTCP configuration Section" in this README for more deatils.

	* Create a random txt file on the server board in the /home/www directory.

	* On first board run below command:
		#. ./epserver -p /home/www -f epserver.conf -N 8
	* On 2nd board run below command:
		#. ./epwget <IP/file name> <number of requests> -N 1 -c 8000 -f epwget.conf
			e.g. ./epwget 10.0.0.112/a.txt 1000000 -N 1 -c 8000 -f epwget.conf

	Where:
		-p is path of server home directory where all the files are present.
		-f is configuration file name.
		-N is number of cores.
		-c is number of concurrent connections.
	Note: epwget can work only on 1 core.

MTCP configuration Section:
--------------------------

	Please refer "apps/perf/client.conf" sample file for more details on configuration supported by MTCP.
	Below is the "Port" and "eal_args" parameters description:

	Port: List of port names to be used for traffic. Port names must be comma(,) separated.
                ie. dpni.* in case of DPAA2 and fm1-mac* in case of DPAA1.

		e.g. on DPAA1, user want to use only fm1-mac9 and fm1-mac10 ports and in
		     that case port configuration will be like:
		     port = fm1-mac9,fm1-mac10

		Note: The "port" config parameter also accept user's given IP address for each
			port. If IP is not given for port then MTCP stack will generate
			random IPs.

		examples port configuration with IP addresses:
			port = fm1-mac9:192.168.1.1/24,fm1-mac10:192.168.2.1/24

				MTCP stack will initialize fm1-mac9 with IP 192.168.1.1 and
				netmask value 255.255.255.0 and fm1-mac10 with IP 192.168.2.1
				and netmask value 255.255.255.0.
			IP value must be immediate after port name and colon(:) separated.

	eal_args: List of DPDK EAL library configuration. please refer:
		  https://doc.dpdk.org/guides/linux_gsg/linux_eal_parameters.html
		  for detail list of supported parameters.

		  e.g.: eal_args = --log-level=8 -b dpaa_bus:fm1-mac10

		  Parameters must be separated by a space chareacter.
		  Note: please dont use eal_args for core-mask, "num_cores" can be used for
			number of cores.
